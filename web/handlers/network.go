package handlers

import (
	"fmt"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/labstack/echo/v4"
	"github.com/rs/zerolog/log"
	"github.com/yunkon-kim/knock-knock/internal/config"
	"github.com/yunkon-kim/knock-knock/pkg/tumblebug"
)

func ViewNetworkDesign(c echo.Context) error {

	// token, err := getTokenFromSession(c)
	// if err != nil {
	// 	log.Error().Err(err).Msg("")
	// 	return c.JSON(http.StatusInternalServerError, err)
	// }

	// log.Debug().Msgf("token: %v", token)

	// map to store csp and regions
	// e.g., cspRegions["AWS"] = []string{"us-east-1", "us-west-2", "eu-central-1", "ap-northeast-2"}
	cspRegions := make(map[string][]string)

	providers, err := tumblebug.GetProviders()
	if err != nil {
		log.Error().Err(err).Msg("")
		return c.JSON(http.StatusInternalServerError, err)
	}

	for _, provider := range providers {
		log.Debug().Msgf("provider: %v", provider)

		regions, err := tumblebug.GetRegions(provider)
		if err != nil {
			log.Error().Err(err).Msg("")
			continue
		}

		cspRegions[provider] = regions
	}

	return c.Render(http.StatusOK, "net.html", map[string]interface{}{
		"cspRegions": cspRegions,
	})
}

// VNetDesignRequest is a struct to handle the utility function, DesignVNet()
type VNetDesignRequest struct {
	DesiredPrivateNetwork string                      `json:"desiredPrivateNetwork"`
	SupernettingEnabled   string                      `json:"supernettingEnabled"`
	McNetConfigurations   []McNetConfigurationDetails `json:"mcNetConfigurations"`
}

type McNetConfigurationDetails struct {
	Csp     string          `json:"csp"`
	Regions []RegionDetails `json:"regions"`
}

type RegionDetails struct {
	Name  string        `json:"name"`
	VNets []VNetDetails `json:"vNets"`
}

type VNetDetails struct {
	SubnetCount    string `json:"subnetCount"`
	HostsPerSubnet string `json:"hostsPerSubnet"`
	UseFirstNZones string `json:"useFirstNZones"`
}

type VNetDesignResponse struct {
	RootNetworkCIDR string      `json:"rootNetworkCIDR,omitempty"` // in case of supernetting enabled
	VNetReqList     []TbVNetReq `json:"vNetReqList"`
}

// TbVNetReq is a struct to handle 'Create vNet' request toward CB-Tumblebug.
type TbVNetReq struct { // Tumblebug
	Name           string        `json:"name" validate:"required" example:"vnet00"`
	ConnectionName string        `json:"connectionName" validate:"required" example:"aws-ap-northeast-2"`
	CidrBlock      string        `json:"cidrBlock" example:"10.0.0.0/16"`
	SubnetInfoList []TbSubnetReq `json:"subnetInfoList"`
	Description    string        `json:"description" example:"vnet00 managed by CB-Tumblebug"`
	// todo: restore the tag list later
	// TagList        []KeyValue    `json:"tagList,omitempty"`
}

// TbSubnetReq is a struct that represents TB subnet object.
type TbSubnetReq struct { // Tumblebug
	Name        string `json:"name" validate:"required" example:"subnet00"`
	IPv4_CIDR   string `json:"ipv4_CIDR" validate:"required" example:"10.0.1.0/24"`
	Zone        string `json:"zone,omitempty"`
	Description string `json:"description,omitempty" example:"subnet00 managed by CB-Tumblebug"`
	// todo: restore the tag list later
	// TagList     []KeyValue `json:"tagList,omitempty"`
}

// TbVNetInfo is a struct that represents TB vNet object.
type TbVNetInfo struct {
	// ResourceType is the type of the resource
	ResourceType string `json:"resourceType"`

	// Id is unique identifier for the object
	Id string `json:"id" example:"aws-ap-southeast-1"`
	// Uid is universally unique identifier for the object, used for labelSelector
	Uid string `json:"uid,omitempty" example:"wef12awefadf1221edcf"`
	// CspResourceName is name assigned to the CSP resource. This name is internally used to handle the resource.
	CspResourceName string `json:"cspResourceName,omitempty" example:"we12fawefadf1221edcf"`
	// CspResourceId is resource identifier managed by CSP
	CspResourceId string `json:"cspResourceId,omitempty" example:"csp-06eb41e14121c550a"`

	// Name is human-readable string to represent the object
	Name                 string         `json:"name" example:"aws-ap-southeast-1"`
	ConnectionName       string         `json:"connectionName"`
	CidrBlock            string         `json:"cidrBlock"`
	SubnetInfoList       []TbSubnetInfo `json:"subnetInfoList"`
	Description          string         `json:"description"`
	Status               string         `json:"status"`
	KeyValueList         []KeyValue     `json:"keyValueList,omitempty"`
	AssociatedObjectList []string       `json:"associatedObjectList"`
	IsAutoGenerated      bool           `json:"isAutoGenerated"`
	// todo: restore the tag list later
	// TagList              []KeyValue     `json:"tagList,omitempty"`

	// SystemLabel is for describing the Resource in a keyword (any string can be used) for special System purpose
	SystemLabel string `json:"systemLabel" example:"Managed by CB-Tumblebug" default:""`

	// Disabled for now
	//Region         string `json:"region"`
	//ResourceGroupName string `json:"resourceGroupName"`
}

// TbSubnetInfo is a struct that represents TB subnet object.
type TbSubnetInfo struct { // Tumblebug
	// ResourceType is the type of the resource
	ResourceType string `json:"resourceType"`

	// Id is unique identifier for the object
	Id string `json:"id" example:"aws-ap-southeast-1"`
	// Uid is universally unique identifier for the object, used for labelSelector
	Uid string `json:"uid,omitempty" example:"wef12awefadf1221edcf"`
	// CspResourceName is name assigned to the CSP resource. This name is internally used to handle the resource.
	CspResourceName string `json:"cspResourceName,omitempty" example:"we12fawefadf1221edcf"`
	// CspResourceId is resource identifier managed by CSP
	CspResourceId string `json:"cspResourceId,omitempty" example:"csp-06eb41e14121c550a"`

	// Name is human-readable string to represent the object
	Name           string `json:"name" example:"aws-ap-southeast-1"`
	ConnectionName string `json:"connectionName"`
	// CspVNetName is identifier to handle CSP vNet resource
	CspVNetName string `json:"cspVNetName,omitempty" example:"we12fawefadf1221edcf"`
	// CspVNetId is vNet resource identifier managed by CSP
	CspVNetId    string        `json:"cspResourceId,omitempty" example:"csp-45eb41e14121c550a"`
	Status       string        `json:"status"`
	IPv4_CIDR    string        `json:"ipv4_CIDR"`
	Zone         string        `json:"zone,omitempty"`
	BastionNodes []BastionNode `json:"bastionNodes,omitempty"`
	KeyValueList []KeyValue    `json:"keyValueList,omitempty"`
	Description  string        `json:"description"`
	// todo: restore the tag list later
	// TagList        []KeyValue    `json:"tagList,omitempty"`
}

// BastionNode is a struct that represents TB BastionNode object.
type BastionNode struct {
	MciId string `json:"mciId"`
	VmId  string `json:"vmId"`
}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func DesignMultiCloudNetwork(c echo.Context) error {
	reqt := new(VNetDesignRequest)
	c.Bind(reqt)

	log.Debug().Msgf("reqt: %v", reqt)

	client := resty.New()
	apiUser := config.Tumblebug.API.Username
	apiPass := config.Tumblebug.API.Password

	client.SetBasicAuth(apiUser, apiPass)

	tbRestEndpoint := config.Tumblebug.RestUrl
	// Set API URL
	urlDesignMcNet := fmt.Sprintf("%s/util/vNet/design", tbRestEndpoint)

	tbResp := new(VNetDesignResponse)

	// [Via Tumblebug] Design multi-cloud network
	apiResp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetBody(reqt).
		SetResult(tbResp).
		Post(urlDesignMcNet)

	if err != nil {
		log.Error().Err(err).Msg("")
		return err
	}

	// Check response status code
	if apiResp.StatusCode() != http.StatusCreated {
		errMsg := fmt.Errorf("failed to design multi-cloud network(status code: %d)", apiResp.StatusCode())
		log.Error().Err(errMsg).Msg("")

		res := map[string]interface{}{
			"message": "failed to design multi-cloud network",
			"error":   errMsg.Error(),
		}
		return c.JSON(http.StatusInternalServerError, res)
	}

	// Print result
	log.Debug().Msgf("Response Status Code: %d", apiResp.StatusCode())
	log.Trace().Msgf("Response Body: %s", apiResp.String())

	return c.JSON(http.StatusOK, tbResp)
}

func ValidateMultiCloudNetwork(c echo.Context) error {

	// nsId := "knock"
	reqt := new(VNetDesignResponse)
	c.Bind(reqt)

	log.Debug().Msgf("reqt: %v", reqt)

	client := resty.New()
	apiUser := config.Tumblebug.API.Username
	apiPass := config.Tumblebug.API.Password

	client.SetBasicAuth(apiUser, apiPass)

	tbRestEndpoint := config.Tumblebug.RestUrl

	// [Via Tumblebug] Validate network configuration
	netconf := BuildNetworkConfig(*reqt)
	log.Debug().Msgf("netconf: %v", netconf)

	var respOfValidation map[string]interface{}

	// [Via Tumblebug] Create multi-cloud network
	urlValidateMcNet := fmt.Sprintf("%s/util/net/validate", tbRestEndpoint)
	apiResp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetBody(netconf).
		SetResult(respOfValidation).
		Post(urlValidateMcNet)

	if err != nil {
		log.Error().Err(err).Msg("")
		return err
	}

	// Check response status code
	if apiResp.IsError() {
		errMsg := fmt.Errorf("failed to validate network configuration, response: %v", apiResp)
		log.Error().Err(errMsg).Msg("API call failed during network validation")

		res := map[string]interface{}{
			"message": "failed to create multi-cloud network",
			"error":   "Network validation failed. Please check the configuration.",
		}
		return c.JSON(http.StatusInternalServerError, res)
	}
	log.Info().Msg("Network configuration is validated successfully")

	resp := map[string]interface{}{
		"message": "Multi-cloud network is created successfully",
		"result":  respOfValidation,
	}
	return c.JSON(http.StatusCreated, resp)
}

func CreateMultiCloudNetwork(c echo.Context) error {

	nsId := "knock"
	reqt := new(VNetDesignResponse)
	c.Bind(reqt)

	log.Debug().Msgf("reqt: %v", reqt)

	client := resty.New()
	apiUser := config.Tumblebug.API.Username
	apiPass := config.Tumblebug.API.Password

	client.SetBasicAuth(apiUser, apiPass)

	tbRestEndpoint := config.Tumblebug.RestUrl

	// [Via Tumblebug] Validate network configuration
	netconf := BuildNetworkConfig(*reqt)
	log.Debug().Msgf("netconf: %v", netconf)

	var respOfValidation map[string]interface{}

	// [Via Tumblebug] Create multi-cloud network
	urlValidateMcNet := fmt.Sprintf("%s/util/net/validate", tbRestEndpoint)
	apiResp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetBody(netconf).
		SetResult(respOfValidation).
		Post(urlValidateMcNet)

	if err != nil {
		log.Error().Err(err).Msg("")
		return err
	}

	// Check response status code
	if apiResp.IsError() {
		errMsg := fmt.Errorf("failed to validate network configuration, response: %v", apiResp)
		log.Error().Err(errMsg).Msg("API call failed during network validation")

		res := map[string]interface{}{
			"message": "failed to create multi-cloud network",
			"error":   "Network validation failed. Please check the configuration.",
		}
		return c.JSON(http.StatusInternalServerError, res)
	}
	log.Info().Msg("Network configuration is validated successfully")

	/*
		[Via Tumblebug] Create multi-cloud network
	*/

	VNetInfoList := []TbVNetInfo{}
	for _, vNetReq := range reqt.VNetReqList {
		// Set API URL
		urlCreateMcNet := fmt.Sprintf("%s/ns/%s/resources/vNet", tbRestEndpoint, nsId)
		tbResp := new(TbVNetInfo)

		// [Via Tumblebug] Create multi-cloud network
		apiResp, err := client.R().
			SetHeader("Content-Type", "application/json").
			SetBody(vNetReq).
			SetResult(tbResp).
			Post(urlCreateMcNet)

		if err != nil {
			log.Error().Err(err).Msg("")
			return err
		}

		// Check response status code
		if apiResp.IsError() {
			errMsg := fmt.Errorf("failed to create vNet (name: %s)", vNetReq.Name)
			log.Error().Err(errMsg).Msg("")

			res := map[string]interface{}{
				"message": "failed to create multi-cloud network",
				"error":   errMsg.Error(),
			}
			return c.JSON(http.StatusInternalServerError, res)
		}
		// Print result
		log.Debug().Msgf("Response Status Code: %d", apiResp.StatusCode())
		log.Trace().Msgf("Response Body: %s", apiResp.String())

		VNetInfoList = append(VNetInfoList, *tbResp)
	}

	return c.JSON(http.StatusCreated, VNetInfoList)
}

type NetworkConfig struct {
	NetworkConfiguration Network `json:"networkConfiguration"`
}

type Network struct {
	CidrBlock string    `json:"cidrBlock"`
	Name      string    `json:"name,omitempty"`
	Subnets   []Network `json:"subnets,omitempty"`
}

func BuildNetworkConfig(vNets VNetDesignResponse) NetworkConfig {

	networkConfig := new(NetworkConfig)

	superNetwork := new(Network)
	superNetwork.CidrBlock = vNets.RootNetworkCIDR
	superNetwork.Name = "SuperNetwork"

	for _, vNet := range vNets.VNetReqList {
		virtualNetwork := new(Network)
		virtualNetwork.CidrBlock = vNet.CidrBlock
		virtualNetwork.Name = vNet.Name

		for _, subnet := range vNet.SubnetInfoList {
			subnetNetwork := new(Network)
			subnetNetwork.CidrBlock = subnet.IPv4_CIDR
			subnetNetwork.Name = subnet.Name
			virtualNetwork.Subnets = append(virtualNetwork.Subnets, *subnetNetwork)
		}

		superNetwork.Subnets = append(superNetwork.Subnets, *virtualNetwork)
	}

	networkConfig.NetworkConfiguration = *superNetwork

	return *networkConfig
}

// Response structure for RestGetAllVNet
type RestGetAllVNetResponse struct {
	VNet []TbVNetInfo `json:"vNet"`
}
type IdList struct {
	IdList []string `json:"output"`
}

func DeleteMultiCloudNetwork(c echo.Context) error {

	nsId := "knock"

	client := resty.New()
	apiUser := config.Tumblebug.API.Username
	apiPass := config.Tumblebug.API.Password

	client.SetBasicAuth(apiUser, apiPass)

	tbRestEndpoint := config.Tumblebug.RestUrl

	// [Via Tumblebug] Get vNet List
	allVNet := new(RestGetAllVNetResponse)

	// [Via Tumblebug] Create multi-cloud network
	urlGetVNetList := fmt.Sprintf("%s/ns/%s/resources/vNet", tbRestEndpoint, nsId)
	apiResp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetResult(allVNet).
		Get(urlGetVNetList)

	if err != nil {
		log.Error().Err(err).Msg("")
		return err
	}

	// Check response status code
	if apiResp.IsError() {
		errMsg := fmt.Errorf("failed to get vNet list, response: %v", apiResp)
		log.Error().Err(errMsg).Msg("API call failed during getting vNet list")

		res := map[string]interface{}{
			"message": "failed to get vNet list",
			"error":   errMsg.Error(),
		}

		return c.JSON(http.StatusInternalServerError, res)
	}
	log.Info().Msg("Network configuration is retrieved successfully")

	/*
		[Via Tumblebug] Delete all vNets
	*/

	idList := new(IdList)

	urlDeleteAllVNet := fmt.Sprintf("%s/ns/%s/resources/vNet", tbRestEndpoint, nsId)
	apiResp, err = client.R().
		SetHeader("Content-Type", "application/json").
		SetResult(idList).
		Delete(urlDeleteAllVNet)

	if err != nil {
		log.Error().Err(err).Msg("")
		return err
	}

	// Check response status code
	if apiResp.IsError() {
		errMsg := fmt.Errorf("failed to delete all vNet, response: %v", apiResp)
		log.Error().Err(errMsg).Msg("")

		res := map[string]interface{}{
			"message": "failed to delete all vNet",
			"error":   errMsg.Error(),
		}
		return c.JSON(http.StatusInternalServerError, res)
	}

	return c.JSON(http.StatusOK, idList)
}

// func ListOfMultiCloudNetworks(c echo.Context) error {

// }

// func DeleteMultiCloudNetworks(c echo.Context) error {

// }
